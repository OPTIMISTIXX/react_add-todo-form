{"version":3,"sources":["api/users.ts","api/todos.ts","components/TodoList/TodoList.tsx","components/TodoForm/TodoForm.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","TodoList","postWithUser","className","map","todo","foundUser","cn","href","TodoForm","handleSubmit","handlePersonChange","handleTitleChange","handleSubmitWithErrors","personValue","useState","errorTitle","setErrorTitle","errorUser","setErrorUser","action","method","onSubmit","type","placeholder","value","onChange","length","trim","disabled","usersFromServer","user","onClick","App","todosFromServer","todos","setTodos","setPersonValue","setTitle","find","e","preventDefault","newTodo","prevTodos","addPost","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.34358ad3.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import cn from 'classnames';\n\ntype Props = {\n  postWithUser:{ todo:\n  { id: number; title: string; completed: boolean; userId: number; };\n  foundUser: { id: number; name: string; username: string; email: string; }\n  | undefined; }[],\n};\n\nexport const TodoList: React.FC<Props> = ({\n  postWithUser,\n}) => {\n  return (\n    <section className=\"TodoList\">\n      {postWithUser.map(({ todo, foundUser }) => (\n        <article\n          data-id=\"1\"\n          className={cn('TodoInfo',\n            { 'TodoInfo--completed': todo.completed })}\n        >\n          <h2 className=\"TodoInfo__title\">\n            {todo.title}\n          </h2>\n          {foundUser && (\n            <a\n              className=\"UserInfo\"\n              href={`mailto:${foundUser.email}`}\n              key={todo.userId}\n            >\n              {foundUser.name}\n            </a>\n          )}\n        </article>\n      ))}\n    </section>\n  );\n};\n","import { useState } from 'react';\nimport usersFromServer from '../../api/users';\n\ntype Props = {\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void\n  handlePersonChange: (e: React.FormEvent<HTMLSelectElement>) => void\n  handleTitleChange: (e: React.FormEvent<HTMLInputElement>) => void\n  handleSubmitWithErrors: (e: React.FormEvent<HTMLFormElement>) => void\n  title: string,\n  personValue: string\n};\n\nexport const TodoForm: React.FC<Props> = ({\n  handleSubmit,\n  handlePersonChange,\n  handleTitleChange,\n  handleSubmitWithErrors,\n  title,\n  personValue,\n}) => {\n  const [errorTitle, setErrorTitle] = useState(false);\n  const [errorUser, setErrorUser] = useState(false);\n\n  const checkERRORS = () => {\n    if (title.length === 0 || !title.trim()) {\n      setErrorTitle(true);\n    } else {\n      setErrorTitle(false);\n    }\n\n    if (personValue === '') {\n      setErrorUser(true);\n    } else {\n      setErrorUser(false);\n    }\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={errorTitle === false\n         && errorUser === false ? handleSubmit : handleSubmitWithErrors}\n    >\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          data-cy=\"titleInput\"\n          placeholder=\"Enter a title\"\n          value={title}\n          onChange={handleTitleChange}\n        />\n        {errorTitle === true && (title.length === 0 || !title.trim())\n          ? <span className=\"error\">Enter a title</span> : ''}\n      </div>\n\n      <div className=\"field\">\n        <select\n          data-cy=\"userSelect\"\n          value={personValue}\n          onChange={handlePersonChange}\n        >\n          <option value=\"\" disabled>Choose a user</option>\n          {usersFromServer.map((user) => (\n            <option\n              value={user.name}\n              key={user.id}\n            >\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {errorUser === true && personValue === ''\n          ? <span className=\"error\">Choose a user</span> : ''}\n      </div>\n\n      <button\n        type=\"submit\"\n        data-cy=\"submitButton\"\n        onClick={checkERRORS}\n      >\n        Add\n      </button>\n    </form>\n\n  );\n};\n","import './App.scss';\nimport React, { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { TodoForm } from './components/TodoForm/TodoForm';\nimport { Todos } from './types/Todos';\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todosFromServer);\n\n  const [personValue, setPersonValue] = useState<string>('');\n  const [title, setTitle] = useState<string>('');\n\n  const handleTitleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    setTitle((e.target as HTMLInputElement).value);\n  };\n\n  const handlePersonChange = (e: React.FormEvent<HTMLSelectElement>) => {\n    setPersonValue((e.target as HTMLSelectElement).value);\n  };\n\n  const postWithUser\n    = todos.map((todo) => {\n      const foundUser = usersFromServer\n        .find((user) => user.id === todo.userId);\n\n      return { todo, foundUser };\n    });\n\n  const addPost = () => {\n    const foundUser = usersFromServer.find((user) => user.name === personValue);\n\n    if (!foundUser || !title.trim()) {\n      return;\n    }\n\n    const newTodo = {\n      completed: false,\n      id: usersFromServer.length + 1,\n      title,\n      userId: foundUser.id,\n    };\n\n    setTodos((prevTodos:Todos[]) => [...prevTodos, newTodo]);\n  };\n\n  const handleSubmitWithErrors\n  = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    addPost();\n    setTitle('');\n    setPersonValue('');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm\n        handleSubmit={handleSubmit}\n        handleSubmitWithErrors={handleSubmitWithErrors}\n        handlePersonChange={handlePersonChange}\n        handleTitleChange={handleTitleChange}\n        title={title}\n        personValue={personValue}\n      />\n      <TodoList\n        postWithUser={postWithUser}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}